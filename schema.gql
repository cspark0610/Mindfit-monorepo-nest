# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ActionDto {
  type: String!
}

type AgoraTokens {
  rtcToken: String
  rtmToken: String
}

enum AnswerDimensions {
  CF
  CH
  CW
  IMPROVE_COMMUNICATION_SKILLS
  IMPROVE_INTERPERSONAL_SKILLS
  IMPROVE_INTRAPERSONAL_SKILLS
  IMPROVE_LEADERSHIP
  IMPROVE_LIVE_WORK_BALANCE
  IMPROVE_PRODUCTIVITY
  IMPROVE_SOCIAL_RELATIONS
  IMPROVE_TECH_SKILLS
  IMPROVE_WORK_RELATIONS
  ME
  PL
  RI
  SH
  TW
}

type Auth {
  refreshToken: String!
  strapiToken: String!
  token: String!
}

input AvailabilityRangeDto {
  friday: [HoursInterval!]
  monday: [HoursInterval!]
  saturday: [HoursInterval!]
  sunday: [HoursInterval!]
  thursday: [HoursInterval!]
  tuesday: [HoursInterval!]
  wednesday: [HoursInterval!]
}

type AvailabilityRangeObjectType {
  friday: [HoursIntervalObjectType!]
  monday: [HoursIntervalObjectType!]
  saturday: [HoursIntervalObjectType!]
  sunday: [HoursIntervalObjectType!]
  thursday: [HoursIntervalObjectType!]
  tuesday: [HoursIntervalObjectType!]
  wednesday: [HoursIntervalObjectType!]
}

input ChangePasswordDto {
  actualPassword: String!
  confirmPassword: String!
  password: String!
}

type Chat {
  createdAt: DateTime!
  id: Float!
  messages: [Message!]
  updatedAt: DateTime
  users: [User!]!
}

type Coach {
  assignedCoachees: [Coachee!]
  bio: String!
  coachAgenda: CoachAgenda
  coachApplication: CoachApplication
  coachNotes: [CoachNote!]
  coacheeEvaluations: [CoacheeEvaluation!]
  coachingAreas: [CoachingArea!]
  coachingSessions: [CoachingSession!]
  createdAt: DateTime!
  historicalAssigments: [HistoricalAssigment!]
  id: Float!
  isActive: Boolean!
  phoneNumber: String!
  profilePicture: FileMedia
  profileVideo: FileMedia
  suggestionCoachees: [SuggestedCoaches!]
  updatedAt: DateTime
  user: User!
}

type CoachAgenda {
  availabilityRange: AvailabilityRangeObjectType
  coach: Coach!
  coachAgendaDays: [CoachAgendaDay!]
  coachAppointments: [CoachAppointment!]
  id: Float!
  outOfService: Boolean!
}

type CoachAgendaDay {
  availableHours: [HoursIntervalObjectType!]
  coachAgenda: CoachAgenda!
  day: DateTime!
  exclude: Boolean!
  id: Float!
}

type CoachApplication {
  approved: Boolean!
  coach: Coach!
  documents: Document!
  email: String!
  id: Float!
  name: String!
  phoneNumber: String!
}

type CoachAppointment {
  accomplished: Boolean!
  coachAgenda: CoachAgenda!
  coachConfirmation: DateTime
  coachee: Coachee!
  coacheeConfirmation: DateTime
  coachingSession: CoachingSession
  endDate: DateTime!
  id: Float!
  remarks: String!
  startDate: DateTime!
}

type CoachDashboardData {
  coacheesRecentlyRegistered: [Coachee]!
  coacheesWithUpcomingAppointments: [Coachee]!
  coacheesWithoutRecentActivity: [Coachee]!
}

input CoachDto {
  bio: String!
  coachApplicationId: Float
  coachingAreasId: [Float!]
  phoneNumber: String!
  picture: S3UploadSignedUrlDto
  userId: Float!
  videoPresentation: S3UploadSignedUrlDto
}

type CoachNote {
  coach: Coach!
  coachee: Coachee!
  createdAt: DateTime!
  id: Float!
  note: String!
  updatedAt: DateTime
}

input CoachNoteDto {
  coacheeId: Float!
  note: String!
}

input CoachSessionFeedbackDto {
  coachFeedback: [DefaultAnswerFeedbackDto!]!
  coachingSessionId: Float!
  feedbackId: Float!
}

type Coachee {
  aboutPosition: String
  assignedCoach: Coach
  bio: String
  canViewDashboard: Boolean!
  coachAppointments: [CoachAppointment!]
  coachNotes: [CoachNote!]
  coacheeEvaluations: [CoacheeEvaluation!]
  coachingAreas: [CoachingArea!]
  coachingSessions: [CoachingSession!]
  createdAt: DateTime!
  dimensionAverages: [DimensionAverages!]
  historicalAssigments: [HistoricalAssigment!]
  id: Float!
  invitationAccepted: Boolean
  invited: Boolean!
  isActive: Boolean!
  isAdmin: Boolean!
  isSuspended: Boolean!
  objetives: [CoacheeObjective!]
  organization: Organization
  phoneNumber: String
  position: String!
  profilePicture: FileMedia
  registrationStatus: CoacheeRegistrationStatus
  suggestedCoaches: [SuggestedCoaches!]
  updatedAt: DateTime
  user: User!
}

type CoacheeAgenda {
  appointments: [CoachAppointment!]
  assignedCoach: Coach!
  satsRealized: [SatReport!]
}

input CoacheeDto {
  aboutPosition: String!
  bio: String!
  canViewDashboard: Boolean!
  coachingAreasId: [Float]!
  invitationAccepted: Boolean!
  invited: Boolean!
  isAdmin: Boolean!
  organizationId: Float!
  phoneNumber: String!
  picture: S3UploadSignedUrlDto
  position: String!
  userId: Float!
}

type CoacheeEvaluation {
  coach: Coach!
  coachee: Coachee!
  createdAt: DateTime!
  evaluation: String!
  id: Float!
  updatedAt: DateTime
}

type CoacheeObjective {
  coachee: Coachee!
  createdAt: DateTime!
  icon: String!
  id: Float!
  tasks: [ObjectiveTask!]
  title: String!
  updatedAt: DateTime
}

enum CoacheeRegistrationStatus {
  COACH_APPOINTMENT_PENDING
  COACH_SELECTION_PENDING
  INVITATION_PENDING
  PROFILE_UPDATE_PENDING
  REGISTRATION_COMPLETED
  SAT_PENDING
}

input CoacheeSessionFeedbackDto {
  coacheeFeedback: [DefaultAnswerFeedbackDto!]!
  coachingSessionId: Float!
  feedbackId: Float!
}

input CoacheeSignUpDto {
  aboutPosition: String!
  bio: String!
  canViewDashboard: Boolean!
  coachingAreasId: [Float]!
  invitationAccepted: Boolean!
  invited: Boolean!
  isAdmin: Boolean!
  phoneNumber: String!
  picture: S3UploadSignedUrlDto
  position: String!
}

type CoacheesRegistrationStatus {
  percentageByStatus: [TotalPerStatus!]!
  totalCoachees: Float!
}

type CoacheesSatisfaction {
  averageSatisfaction: Int
  sessionsSatisfaction: [CoachingSessionSatisfaction!]
}

type CoachingArea {
  coachees: [Coachee!]
  coaches: [Coach!]
  codename: String!
  coverPicture: String!
  createdAt: DateTime!
  description: String!
  id: Float!
  name: String!
  updatedAt: DateTime
}

input CoachingAreaDto {
  codename: String!
  coverPicture: String!
  description: String!
  name: String!
}

type CoachingSession {
  appointmentRelated: CoachAppointment!
  coach: Coach!
  coachEvaluation: String
  coachFeedback: String
  coachee: Coachee!
  coacheeFeedback: String
  coachingSessionFeedback: CoachingSessionFeedback!
  id: Float!
  isCoachInSession: Boolean!
  isCoacheeInSession: Boolean!
  remarks: String
}

type CoachingSessionAccess {
  chatSessionChannel: String!
  coachingSession: CoachingSession!
  tokens: AgoraTokens!
  videoSessionChannel: String!
}

type CoachingSessionFeedback {
  coachFeedback: [DefaultFeedbackAnswer!]
  coacheeFeedback: [DefaultFeedbackAnswer!]
  coachingSession: CoachingSession!
  feedback: Feedback!
  id: Float!
}

input CoachingSessionFeedbackDto {
  coachFeedback: [DefaultAnswerFeedbackDto!]!
  coacheeFeedback: [DefaultAnswerFeedbackDto!]!
  coachingSessionId: Float!
  feedbackId: Float!
}

type CoachingSessionSatisfaction {
  questionCodename: String!
  value: Float!
}

type CoachingSessionTimeline {
  datasets: [Dataset!]!
  labels: [String!]!
}

enum ConfigCodeNames {
  COACH_SUGGESTED_BY_REQUEST
  DAYS_COACHEE_RECENT_REGISTERED
  DAYS_COACHEE_WITHOUT_ACTIVITY
  DAYS_NUMBER_ASSIGNED_COACHEE_AS_RECENT
  DEFAULT_COACHING_SESSION_FEEDBACK
  DEFAULT_SAT
  DEFAULT_SESSION_DURATION
  MAX_APPOINTMENTS_PER_MONTH
  MAX_COACHES_SUGGESTIONS
  MAX_COACHING_SESSION_DURATION
  MAX_DISTANTE_COACH_APPOINTMENT
  MAX_DISTANTE_COACH_AVAILABITY_QUERY
  MIN_COACHING_SESSION_DURATION
  TIME_ZONES
}

type CoreConfig {
  codename: ConfigCodeNames!
  createdAt: DateTime!
  id: Float!
  jsonValue: String
  name: String!
  updatedAt: DateTime
  value: String
}

input CoreConfigDto {
  codename: ConfigCodeNames!
  jsonValue: String
  name: String!
  value: String
}

input CreateCoachAgendaDayDto {
  availableHours: [HoursInterval!]
  day: DateTime!
  exclude: Boolean!
}

input CreateCoachAgendaDto {
  availabilityRange: AvailabilityRangeDto
  coachId: Float!
  outOfService: Boolean
}

input CreateCoachAppointmentDto {
  coacheeId: Float!
  endDate: DateTime!
  remarks: String!
  startDate: DateTime!
  title: String!
}

input CreateCoacheeEvaluationDto {
  coacheeId: Float!
  evaluation: String!
}

input CreateCoacheeOwner {
  organizationData: EditOrganizationDto!
  position: String!
  userData: CreateUserDto!
}

input CreateObjectiveTaskDto {
  coacheeObjectiveId: Float!
  repetitions: Float!
  title: String!
}

input CreateOrganizationCoachee {
  canViewDashboard: Boolean!
  isAdmin: Boolean!
  organizationId: Int!
  position: String!
  userData: CreateUserDto!
}

input CreateStaffUserDto {
  email: String!
  isStaff: Boolean!
  isSuperuser: Boolean!
  name: String!
  password: String!
  role: Roles!
}

input CreateUpdateCoacheeObjectiveDto {
  icon: String!
  title: String!
}

input CreateUserDto {
  email: String!
  name: String!
  password: String!
  role: Roles!
}

type Dataset {
  data: [Int!]!
  label: String!
}

type DateHoursIntervalObjectType {
  from: DateTime
  to: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DayAvailabilityObjectType {
  availability: [DateHoursIntervalObjectType!]!
  date: DateTime!
}

input DefaultAnswerFeedbackDto {
  questionCodename: String!
  value: Float!
}

type DefaultFeedbackAnswer {
  questionCodename: String!
  value: Float!
}

type DevelopmentAreas {
  strengths: [SectionCodenames!]!
  weaknesses: [SectionCodenames!]!
}

enum DiagnosticsEnum {
  ABOVE_AVERAGE_ANGER_STATE
  ABOVE_AVERAGE_ANXIETY_STATE
  ABOVE_AVERAGE_DIET
  ABOVE_AVERAGE_EXPERIENCE_OF_LIFE
  ABOVE_AVERAGE_JOY_STATE
  ABOVE_AVERAGE_MENTAL_RELAXATION
  ABOVE_AVERAGE_NEGATIVE_EMOTIONS
  ABOVE_AVERAGE_PERCEPTION_OF_LIFE
  ABOVE_AVERAGE_PERSONAL_AND_PROFESIONAL_BALANCE
  ABOVE_AVERAGE_PHYSICAL_ACTIVITY
  ABOVE_AVERAGE_POSITIVE_EMOTIONS
  ABOVE_AVERAGE_REST_AND_SLEEP
  ABOVE_AVERAGE_SADNESS_STATE
  BELOW_AVEGARE_COMMUNICATION
  HIGH_CORRECTIVE_LEADERSHIP
  HIGH_TRANSACTIONAL_LEADERSHIP
  HIGH_TRANSFORMATIONAL_LEADERSHIP
  IN_AVERAGE_ANGER_STATE
  IN_AVERAGE_ANXIETY_STATE
  IN_AVERAGE_EXPERIENCE_OF_LIFE
  IN_AVERAGE_JOY_STATE
  IN_AVERAGE_NEGATIVE_EMOTIONS
  IN_AVERAGE_OF_SOME_COMMUNICATION_SKILL
  IN_AVERAGE_PERCEPTION_OF_LIFE
  IN_AVERAGE_POSITIVE_EMOTIONS
  IN_AVERAGE_SADNESS_STATE
  LOW_AVERAGE_ANGER_STATE
  LOW_AVERAGE_ANXIETY_STATE
  LOW_AVERAGE_DIET
  LOW_AVERAGE_EXPERIENCE_OF_LIFE
  LOW_AVERAGE_JOY_STATE
  LOW_AVERAGE_MENTAL_RELAXATION
  LOW_AVERAGE_NEGATIVE_EMOTIONS
  LOW_AVERAGE_OF_SOME_COMMUNICATION_SKILL
  LOW_AVERAGE_PERCEPTION_OF_LIFE
  LOW_AVERAGE_PERSONAL_AND_PROFESIONAL_BALANCE
  LOW_AVERAGE_PHYSICAL_ACTIVITY
  LOW_AVERAGE_POSITIVE_EMOTIONS
  LOW_AVERAGE_REST_AND_SLEEP
  LOW_AVERAGE_SADNESS_STATE
  LOW_SKILL_COMMUNICATION
  OUTSTANGIND_COMMUNICATION
  SOME_CORRECTIVE_LEADERSHIP
  SOME_TRANSACTIONAL_LEADERSHIP
  SOME_TRANSFORMATIONAL_LEADERSHIP
}

type DimensionAverages {
  average: Float!
  base: Float!
  dimension: SectionCodenames!
}

type Document {
  coachApplication: CoachApplication!
  createdAt: DateTime!
  file: String!
  id: Float!
  name: String!
  type: String!
  updatedAt: DateTime
}

input EditCoachAgendaDayDto {
  availableHours: [HoursInterval!]
  day: DateTime
  exclude: Boolean
}

input EditCoachAgendaDto {
  availabilityRange: AvailabilityRangeDto
  outOfService: Boolean
}

input EditCoachAppointmentDto {
  coacheeId: Float
  endDate: DateTime
  remarks: String
  startDate: DateTime
  title: String
}

input EditCoachDto {
  bio: String
  coachApplicationId: Float
  coachingAreasId: [Float!]
  isActive: Boolean
  phoneNumber: String
  picture: S3UploadSignedUrlDto
  videoPresentation: S3UploadSignedUrlDto
}

input EditCoachNoteDto {
  note: String
}

input EditCoacheeDto {
  aboutPosition: String
  bio: String
  canViewDashboard: Boolean
  coachingAreasId: [Float!]
  invitationAccepted: Boolean
  invited: Boolean
  isAdmin: Boolean
  organizationId: Float
  phoneNumber: String
  picture: S3UploadSignedUrlDto
  position: String
}

input EditCoreConfigDto {
  codename: ConfigCodeNames
  jsonValue: String
  name: String
  value: String
}

input EditOrganizationDto {
  about: String
  isActive: Boolean
  name: String
  picture: S3UploadSignedUrlDto
  userId: Int
}

input EditSatBasicAnswerDto {
  answerDimension: AnswerDimensions
  order: Float
  title: String
  translations: TranslationDto
  value: Float
}

input EditSatBasicQuestionDto {
  dimension: QuestionDimentions
  order: Float
  satBasicAnswers: [NestedSatBasicAnswerDto!]
  title: String
  translations: TranslationDto
  type: QuestionsEnum
}

input EditSatBasicSectionDto {
  codename: SectionCodenames
  order: Float
  questions: [NestedSatBasicQuestionDto!]
  title: String
  translations: TranslationDto
}

input EditUserDto {
  email: String
  hashResetPassword: String
  hashedRefreshToken: String
  isActive: Boolean
  isVerified: Boolean
  name: String
  password: String
  role: Roles
  verificationCode: String
}

type FavoritePost {
  id: Float!
  strapiPostId: Float!
  user: User!
}

input FavoritePostDto {
  strapiPostId: Float!
}

type Feedback {
  coachingSessionsFeedbacks: CoachingSessionFeedback!
  createdAt: DateTime!
  description: String!
  id: Float!
  isActive: Boolean!
  questions: [FeedbackQuestion!]!
  title: String!
  updatedAt: DateTime
}

input FeedbackDto {
  description: String!
  isActive: Boolean
  questions: [FeedbackQuestionDto!]!
  title: String!
}

type FeedbackQuestion {
  codename: String!
  defaultText: String!
}

input FeedbackQuestionDto {
  codename: String!
  defaultText: String!
}

type FileMedia {
  key: String!
  location: String!
}

type FocusAreas {
  base: Int
  coachingArea: CoachingArea
  value: Int
}

type HistoricalAssigment {
  assigmentDate: DateTime!
  coach: Coach!
  coachee: Coachee!
  id: Float!
}

type HistoricalCoacheeData {
  coachee: Coachee!
  coacheeEvaluations: [CoacheeEvaluation]!
  coachingAppointments: [CoachAppointment]!
}

input HoursInterval {
  from: String!
  to: String!
}

type HoursIntervalObjectType {
  from: String
  to: String
}

input InviteCoacheeDto {
  aboutPosition: String
  bio: String
  canViewDashboard: Boolean
  coachingAreasId: [Float!]
  isAdmin: Boolean
  phoneNumber: String
  picture: S3UploadSignedUrlDto
  position: String
  user: InviteUserDto!
}

input InviteUserDto {
  email: String!
  name: String!
}

input JoinChatDto {
  userIds: [Float!]!
}

type Label {
  label: String!
}

type LabelAndNumber {
  label: String!
  number: Float!
}

type LabelAndPercentage {
  label: String!
  percentage: Float!
}

input LabelDto {
  label: String!
}

enum Languages {
  ENGLISH
  SPANISH
}

type Message {
  chat: Chat!
  createdAt: DateTime!
  id: Float!
  message: String!
  readBy: [User!]!
  updatedAt: DateTime
  user: User!
}

input MessageDto {
  chatId: Float!
  message: String!
}

input MessageReadByDto {
  messageId: Float!
  readByIds: [Float!]!
}

type Mutation {
  CoachConfirmAppointment(id: Int!): CoachAppointment!
  SuspendOrActivateCoachee(coacheeId: Int!, data: ActionDto!): Coachee!
  acceptInvitation: Coachee!
  activateUser(id: Float!): User!
  addUserReadToCoachingMessage(chatId: Float!, data: MessageReadByDto!): Message!
  assignCoach(coachId: Int!, coacheeId: Int!): Coachee!
  changePassword(data: ChangePasswordDto!): Boolean!
  coachPostponeAppointment(data: PostponeCoachAppointmentDto!): CoachAppointment!
  coacheePostponeAppointment(data: PostponeCoachAppointmentDto!): CoachAppointment!
  createCoach(data: CoachDto!): Coach!
  createCoachAgenda(data: CreateCoachAgendaDto!): CoachAgenda!
  createCoachAgendaDay(data: CreateCoachAgendaDayDto!): CoachAgendaDay!
  createCoachAppointment(data: CreateCoachAppointmentDto!): CoachAppointment!
  createCoachCoachingSessionFeedback(data: CoachSessionFeedbackDto!): CoachingSessionFeedback!
  createCoachNote(data: CoachNoteDto!): CoachNote!
  createCoachee(data: CoacheeDto!): Coachee!
  createCoacheeCoachingSessionFeedback(data: CoacheeSessionFeedbackDto!): CoachingSessionFeedback!
  createCoacheeEvaluation(data: CreateCoacheeEvaluationDto!): CoacheeEvaluation!
  createCoacheeObjective(data: CreateUpdateCoacheeObjectiveDto!): CoacheeObjective!
  createCoacheeOwner(data: CreateCoacheeOwner!): Coachee!
  createCoachingArea(data: CoachingAreaDto!): CoachingArea!
  createCoachingChat(data: JoinChatDto!): Chat!
  createCoachingSessionFeedback(data: CoachingSessionFeedbackDto!): CoachingSessionFeedback!
  createCoreConfig(data: CoreConfigDto!): CoreConfig!
  createDaysCoacheeRecentRegistered(data: CoreConfigDto!): CoreConfig!
  createDaysCoacheeWithoutActivity(data: CoreConfigDto!): CoreConfig!
  createDefaultDaysAsRecientCoacheeAssigned(data: CoreConfigDto!): CoreConfig!
  createFavoritePost(data: FavoritePostDto!): FavoritePost!
  createFeedback(data: FeedbackDto!): Feedback!
  createManyCoach(data: [CoachDto!]!): [Coach!]!
  createManyCoachAgenda(data: [CreateCoachAgendaDto!]!): [CoachAgenda!]!
  createManyCoachAgendaDay(data: [CreateCoachAgendaDayDto!]!): [CoachAgendaDay!]!
  createManyCoachAppointment(data: [CreateCoachAppointmentDto!]!): [CoachAppointment!]!
  createManyCoachNote(data: [CoachNoteDto!]!): [CoachNote!]!
  createManyCoachee(data: [CoacheeDto!]!): [Coachee!]!
  createManyCoacheeEvaluation(data: [CreateCoacheeEvaluationDto!]!): [CoacheeEvaluation!]!
  createManyCoacheeObjective(data: [CreateUpdateCoacheeObjectiveDto!]!): [CoacheeObjective!]!
  createManyCoachingArea(data: [CoachingAreaDto!]!): [CoachingArea!]!
  createManyCoachingSessionFeedback(data: [CoachingSessionFeedbackDto!]!): [CoachingSessionFeedback!]!
  createManyCoreConfig(data: [CoreConfigDto!]!): [CoreConfig!]!
  createManyFavoritePost(data: [FavoritePostDto!]!): [FavoritePost!]!
  createManyFeedback(data: [FeedbackDto!]!): [Feedback!]!
  createManyObjectiveTask(data: [CreateObjectiveTaskDto!]!): [ObjectiveTask!]!
  createManyOrganization(data: [OrganizationDto!]!): [Organization!]!
  createManyPostProgress(data: [PostProgressDto!]!): [PostProgress!]!
  createManySatBasic(data: [SatBasicDto!]!): [SatBasic!]!
  createManySatBasicAnswer(data: [SatBasicAnswerDto!]!): [SatBasicAnswer!]!
  createManySatBasicQuestion(data: [SatBasicQuestionDto!]!): [SatBasicQuestion!]!
  createManySatBasicSection(data: [SatBasicSectionDto!]!): [SatBasicSection!]!
  createManySatReport(data: [SatReportDto!]!): [SatReport!]!
  createManyUser(data: [CreateUserDto!]!): [User!]!
  createObjectiveTask(data: CreateObjectiveTaskDto!): ObjectiveTask!
  createOrganization(data: OrganizationDto!): Organization!
  createOrganizationCoachee(data: CreateOrganizationCoachee!): Coachee!
  createPassword(data: ResetPasswordDto!): Auth!
  createPostProgress(data: PostProgressDto!): PostProgress!
  createSatBasic(data: SatBasicDto!): SatBasic!
  createSatBasicAnswer(data: SatBasicAnswerDto!): SatBasicAnswer!
  createSatBasicQuestion(data: SatBasicQuestionDto!): SatBasicQuestion!
  createSatBasicSection(data: SatBasicSectionDto!): SatBasicSection!
  createSatReport(data: SatReportDto!): SatReport!
  createStaffUser(data: CreateStaffUserDto!): User!
  createTimeZonesCoreConfig(data: CoreConfigDto!): CoreConfig!
  createUser(data: CreateUserDto!): User!
  deactivateUser(id: Float!): User!
  deleteCoach(coachId: Int!): Float!
  deleteCoachAgenda(id: Float!): Float!
  deleteCoachAgendaDay(id: Float!): Float!
  deleteCoachAppointment(id: Float!): Float!
  deleteCoachNote(coachNoteId: Int!): CoachNote!
  deleteCoachee(coacheeId: Int!): Float!
  deleteCoacheeEvaluation(coacheeEvaluationId: Int!): Int!
  deleteCoacheeObjective(id: Int!): Int!
  deleteCoachingArea(id: Float!): Float!
  deleteCoachingMessage(chatId: Float!, messageId: Float!): Message!
  deleteCoachingSessionFeedback(id: Float!): Float!
  deleteCoreConfig(id: Float!): Float!
  deleteFavoritePost(id: Float!): Float!
  deleteFeedback(id: Float!): Float!
  deleteManyCoachAgendaDays(ids: [Float!]!): Float!
  deleteManyCoachAgendas(ids: [Float!]!): Float!
  deleteManyCoachAppointments(ids: [Float!]!): Float!
  deleteManyCoachNotes(ids: [Float!]!): Float!
  deleteManyCoacheeEvaluations(ids: [Float!]!): Float!
  deleteManyCoacheeObjectives(ids: [Float!]!): Float!
  deleteManyCoachees(coacheeIds: [Int!]!): Float!
  deleteManyCoaches(coachIds: [Int!]!): Float!
  deleteManyCoachingAreas(ids: [Float!]!): Float!
  deleteManyCoachingSessionFeedbacks(ids: [Float!]!): Float!
  deleteManyCoachs(ids: [Float!]!): Float!
  deleteManyCoreConfigs(ids: [Float!]!): Float!
  deleteManyFavoritePosts(ids: [Float!]!): Float!
  deleteManyFeedbacks(ids: [Float!]!): Float!
  deleteManyObjectiveTasks(ids: [Float!]!): Float!
  deleteManyOrganizations(organizationIds: [Int!]!): Float!
  deleteManyPostProgresss(ids: [Float!]!): Float!
  deleteManySatBasicAnswers(ids: [Float!]!): Float!
  deleteManySatBasicQuestions(ids: [Float!]!): Float!
  deleteManySatBasicSections(ids: [Float!]!): Float!
  deleteManySatBasics(ids: [Float!]!): Float!
  deleteManySatReports(ids: [Float!]!): Float!
  deleteManyUsers(userIds: [Int!]!): Float!
  deleteObjectiveTask(id: Int!): Int!
  deleteOrganization(organizationId: Int!): Float!
  deletePostProgress(id: Float!): Float!
  deleteSatBasic(id: Float!): Float!
  deleteSatBasicAnswer(id: Float!): Float!
  deleteSatBasicQuestion(id: Float!): Float!
  deleteSatBasicSection(id: Float!): Float!
  deleteSatReport(id: Float!): Float!
  deleteUser(userId: Int!): Float!
  finishSession(sessionId: Float!): CoachingSession!
  inviteCoachee(data: InviteCoacheeDto!): Coachee!
  joinToCoachingChat(chatId: Float!, data: JoinChatDto!): Chat!
  logout: Boolean!
  refreshToken: Auth!
  rejectSuggestedCoaches(data: RejectSuggestedCoachesDto!): SuggestedCoaches!
  removeFromCoachingChat(chatId: Float!, data: JoinChatDto!): Chat!
  requestAppointment(data: RequestCoachAppointmentDto!): CoachAppointment!
  requestResetPassword(email: String!): Boolean!
  resetPassword(data: ResetPasswordDto!): User!
  selectCoach(data: SelectCoachDTO!): Coachee!
  sendCoachingMessages(data: MessageDto!): Message!
  signIn(data: SignInDto!): Auth!
  signInStaffOrSuperUser(data: SignInDto!): Auth!
  signInWithGoogle(data: RRSSDto!): Auth!
  signUp(data: CreateUserDto!): Auth!
  signUpCoachee(data: SignupCoacheeDto!): Auth!
  signUpWithGoogle(data: RRSSSignUpDto!): Auth!
  updateCoach(data: EditCoachDto!): Coach!
  updateCoachAgenda(data: EditCoachAgendaDto!): CoachAgenda!
  updateCoachAgendaDay(data: EditCoachAgendaDayDto!, id: Float!): CoachAgendaDay!
  updateCoachAppointment(data: EditCoachAppointmentDto!, id: Float!): CoachAppointment!
  updateCoachById(coachId: Int!, data: EditCoachDto!): Coach!
  updateCoachNote(coachNoteId: Int!, data: EditCoachNoteDto!): CoachNote!
  updateCoachee(coacheeId: Int!, data: EditCoacheeDto!): Coachee!
  updateCoacheeEvaluation(coacheeEvaluationId: Int!, data: UpdateCoacheeEvaluationDto!): CoacheeEvaluation!
  updateCoacheeObjective(data: CreateUpdateCoacheeObjectiveDto!, id: Int!): CoacheeObjective!
  updateCoachingArea(data: CoachingAreaDto!, id: Float!): CoachingArea!
  updateCoachingMessage(chatId: Float!, data: UpdateMessageDto!, messageId: Float!): Message!
  updateCoachingSessionFeedback(data: CoachingSessionFeedbackDto!, id: Float!): CoachingSessionFeedback!
  updateCoreConfig(data: EditCoreConfigDto!, id: Float!): CoreConfig!
  updateFavoritePost(data: UpdateFavoritePostDto!, id: Float!): FavoritePost!
  updateFeedback(data: FeedbackDto!, id: Float!): Feedback!
  updateManyCoachAgendaDays(data: EditCoachAgendaDayDto!, ids: [Float!]!): [CoachAgendaDay!]!
  updateManyCoachAgendas(data: EditCoachAgendaDto!, ids: [Float!]!): [CoachAgenda!]!
  updateManyCoachAppointments(data: EditCoachAppointmentDto!, ids: [Float!]!): [CoachAppointment!]!
  updateManyCoachNotes(data: CoachNoteDto!, ids: [Float!]!): [CoachNote!]!
  updateManyCoacheeEvaluations(data: UpdateCoacheeEvaluationDto!, ids: [Float!]!): [CoacheeEvaluation!]!
  updateManyCoacheeObjectives(data: CreateUpdateCoacheeObjectiveDto!, ids: [Float!]!): [CoacheeObjective!]!
  updateManyCoachees(coacheeIds: [Int!]!, data: EditCoacheeDto!): [Coachee!]!
  updateManyCoaches(coachIds: [Int!]!, data: EditCoachDto!): [Coach!]!
  updateManyCoachingAreas(data: CoachingAreaDto!, ids: [Float!]!): [CoachingArea!]!
  updateManyCoachingSessionFeedbacks(data: CoachingSessionFeedbackDto!, ids: [Float!]!): [CoachingSessionFeedback!]!
  updateManyCoachs(data: EditCoachDto!, ids: [Float!]!): [Coach!]!
  updateManyCoreConfigs(data: EditCoreConfigDto!, ids: [Float!]!): [CoreConfig!]!
  updateManyFavoritePosts(data: UpdateFavoritePostDto!, ids: [Float!]!): [FavoritePost!]!
  updateManyFeedbacks(data: FeedbackDto!, ids: [Float!]!): [Feedback!]!
  updateManyObjectiveTasks(data: UpdateObjectiveTaskDto!, ids: [Float!]!): [ObjectiveTask!]!
  updateManyOrganizations(data: EditOrganizationDto!, organizationIds: [Int!]!): [Organization!]!
  updateManyPostProgresss(data: UpdatePostProgressDto!, ids: [Float!]!): [PostProgress!]!
  updateManySatBasicAnswers(data: EditSatBasicAnswerDto!, ids: [Float!]!): [SatBasicAnswer!]!
  updateManySatBasicQuestions(data: EditSatBasicQuestionDto!, ids: [Float!]!): [SatBasicQuestion!]!
  updateManySatBasicSections(data: EditSatBasicSectionDto!, ids: [Float!]!): [SatBasicSection!]!
  updateManySatBasics(data: SatBasicDto!, ids: [Float!]!): [SatBasic!]!
  updateManySatReports(data: SatReportDto!, ids: [Float!]!): [SatReport!]!
  updateManyUsers(data: EditUserDto!, userIds: [Int!]!): [User!]!
  updateObjectiveTask(data: UpdateObjectiveTaskDto!, id: Int!): ObjectiveTask!
  updateOrganization(data: EditOrganizationDto!, organizationId: Int!): Organization!
  updatePostProgress(data: UpdatePostProgressDto!, id: Float!): PostProgress!
  updateSatBasic(data: SatBasicDto!, id: Float!): SatBasic!
  updateSatBasicAnswer(data: EditSatBasicAnswerDto!, id: Float!): SatBasicAnswer!
  updateSatBasicQuestion(data: EditSatBasicQuestionDto!, id: Float!): SatBasicQuestion!
  updateSatBasicSection(data: EditSatBasicSectionDto!, id: Float!): SatBasicSection!
  updateSatReport(data: SatReportDto!, id: Float!): SatReport!
  updateUser(data: EditUserDto!, userId: Int!): User!
  verifyAccount(data: VerifyAccountDto!): Boolean!
}

input NestedSatBasicAnswerDto {
  answerDimension: AnswerDimensions
  order: Float!
  title: String!
  translations: TranslationDto
  value: Float!
}

input NestedSatBasicQuestionDto {
  dimension: QuestionDimentions
  order: Float!
  satBasicAnswers: [NestedSatBasicAnswerDto!]!
  title: String!
  translations: TranslationDto
  type: QuestionsEnum!
}

input NestedSatBasicSectionDto {
  codename: SectionCodenames
  order: Float!
  questions: [NestedSatBasicQuestionDto!]!
  title: String!
  translations: TranslationDto
}

type ObjectiveTask {
  createdAt: DateTime!
  executions: Float!
  id: Float!
  objective: CoacheeObjective!
  repetitions: Float!
  title: String!
  updatedAt: DateTime
}

type Organization {
  about: String!
  coachees: [Coachee!]
  id: Float!
  isActive: Boolean!
  name: String!
  owner: User!
  profilePicture: FileMedia
}

input OrganizationDto {
  about: String!
  name: String!
  picture: S3UploadSignedUrlDto
  userId: Int
}

type PostProgress {
  id: Float!
  progress: Float!
  strapiPostId: Float!
  user: User!
}

input PostProgressDto {
  progress: Float!
  strapiPostId: Float!
}

input PostponeCoachAppointmentDto {
  appointmentId: Float!
  endDate: DateTime
  remarks: String
  startDate: DateTime
}

type Query {
  findAllCoachAgendaDays: [CoachAgendaDay!]!
  findAllCoachAgendas: [CoachAgenda!]!
  findAllCoachAppointments: [CoachAppointment!]!
  findAllCoachNotes: [CoachNote!]!
  findAllCoacheeEvaluations: [CoacheeEvaluation!]!
  findAllCoacheeObjectives: [CoacheeObjective!]!
  findAllCoachees: [Coachee!]!
  findAllCoachingAreas: [CoachingArea!]!
  findAllCoachingSessionFeedbacks: [CoachingSessionFeedback!]!
  findAllCoachs: [Coach!]!
  findAllCoreConfigs: [CoreConfig!]!
  findAllFavoritePosts: [FavoritePost!]!
  findAllFeedbacks: [Feedback!]!
  findAllObjectiveTasks: [ObjectiveTask!]!
  findAllOrganizations: [Organization!]!
  findAllPostProgresss: [PostProgress!]!
  findAllSatBasicAnswers: [SatBasicAnswer!]!
  findAllSatBasicQuestions: [SatBasicQuestion!]!
  findAllSatBasicSections: [SatBasicSection!]!
  findAllSatBasics: [SatBasic!]!
  findAllSatReports: [SatReport!]!
  findAllUsers: [User!]!
  findCoachAgendaById(id: Int!): CoachAgenda!
  findCoachAgendaDayById(id: Int!): CoachAgendaDay!
  findCoachAppointmentById(id: Int!): CoachAppointment!
  findCoachById(id: Int!): Coach!
  findCoachNoteById(id: Int!): CoachNote!
  findCoacheeById(id: Int!): Coachee!
  findCoacheeEvaluationById(id: Int!): CoacheeEvaluation!
  findCoacheeObjectiveById(id: Int!): CoacheeObjective!
  findCoachingAreaById(id: Int!): CoachingArea!
  findCoachingSessionFeedbackById(id: Int!): CoachingSessionFeedback!
  findCoreConfigById(id: Int!): CoreConfig!
  findFavoritePostById(id: Int!): FavoritePost!
  findFeedbackById(id: Int!): Feedback!
  findObjectiveTaskById(id: Int!): ObjectiveTask!
  findOrganizationById(id: Int!): Organization!
  findPostProgressById(id: Int!): PostProgress!
  findSatBasicAnswerById(id: Int!): SatBasicAnswer!
  findSatBasicById(id: Int!): SatBasic!
  findSatBasicQuestionById(id: Int!): SatBasicQuestion!
  findSatBasicSectionById(id: Int!): SatBasicSection!
  findSatReportById(id: Int!): SatReport!
  findUserById(id: Int!): User!
  getAllHistoricalAssigmentsByCoachId: [HistoricalAssigment!]!
  getAllHistoricalAssigmentsByCoacheeId: [HistoricalAssigment!]!
  getAllTimesZones: [TimeZoneObjectType!]!
  getAllTimesZonesCoreConfig: CoreConfig!
  getCoachAvailability(from: DateTime!, to: DateTime!): [DayAvailabilityObjectType!]!
  getCoachAvailabilityByAgendaId(coachAgendaId: Float!, from: DateTime!, to: DateTime!): [DayAvailabilityObjectType!]!
  getCoachDashboardData: CoachDashboardData!
  getCoachProfile: Coach!
  getCoachSessionTokens(sessionId: Float!): CoachingSessionAccess!
  getCoacheeAgenda(from: DateTime!, to: DateTime!): CoacheeAgenda!
  getCoacheeProfile: Coachee!
  getCoacheeSessionTokens(sessionId: Float!): CoachingSessionAccess!
  getCoacheesRegistrationStatus: CoacheesRegistrationStatus!
  getCoachingChat(chatId: Float!): Chat!
  getDaysCoacheeRecentRegistered: CoreConfig!
  getDaysCoacheeWithoutActivity: CoreConfig!
  getDefaultDaysAsRecentCoacheeAssigned: CoreConfig!
  getDefaultFeedbackForCoachingSession: CoreConfig!
  getDefaultSat: CoreConfig!
  getGlobalCoacheeSessionSatisfaction: CoacheesSatisfaction!
  getHistoricalCoacheeData(coacheeId: Int!): HistoricalCoacheeData!
  getOrganizationCoacheesCoachingSessionTimeline(period: String!): CoachingSessionTimeline!
  getOrganizationCoacheesSatisfaction: CoacheesSatisfaction!
  getOrganizationDevelopmentAreas: DevelopmentAreas!
  getOrganizationFocusAreas: [FocusAreas!]!
  getOrganizationProfile: Organization!
  getPercentageAccomplishedAppointments: LabelAndPercentage!
  getPositiveAnswers: [SatBasicAnswer!]!
  getRandomSuggestedCoaches: SuggestedCoaches!
  getRecentHistoricalAssigmentsByCoachId: [HistoricalAssigment!]!
  getTimeZonesByLabel(label: String!): [TimeZoneObjectType!]!
  getTimeZonesByName(name: String!): [TimeZoneObjectType!]!
  getTimeZonesByTzCode(tzCode: String!): [TimeZoneObjectType!]!
  getTimeZonesByUtc(utc: String!): [TimeZoneObjectType!]!
  getTotalAccomplishedAppointments: LabelAndNumber!
  getTotalAppointments: LabelAndNumber!
  getUploadSignedUrl(data: S3UploadSignedUrlDto!): String!
}

enum QuestionDimentions {
  ANGER
  ANXIETY
  COORDINATOR
  CORRECTIVE_AVOIDANT_LEADERSHIP
  CREATIVE
  DIET
  DOWNWARD_COMMUNICATION
  EVALUATOR
  EXPERIENCE_OF_LIFE
  FINISHER
  GENERAL
  HORIZONTAL_COMMUNICATION
  IMPLANTER
  JOY
  MENTAL_RELAXATION
  PERCEPTION_OF_LIFE
  PERSONAL_AND_PROFESIONAL_BALANCE
  PHYSICAL_ACTIVITY
  RESOURCE_INVESTIGATOR
  REST_AND_SLEEP
  SADNESS
  SKILL_IMPROVEMENT
  TEAM_WORKER
  TRANSACTIONAL_LEADERSHIP
  TRANSFORMATIONAL_LEADERSHIP
  UPWARD_COMMUNICATION
}

enum QuestionsEnum {
  BOOLEAN
  FREE_TEXT
  MULTISELECT
  NUMBER
  SELECT
}

input RRSSDto {
  mobile: String
  token: String!
}

input RRSSSignUpDto {
  mobile: String
  role: Roles!
  token: String!
}

input RejectSuggestedCoachesDto {
  rejectionReason: String!
  suggestedCoachesId: Float!
}

input RequestCoachAppointmentDto {
  endDate: DateTime!
  remarks: String
  startDate: DateTime!
}

input ResetPasswordDto {
  confirmPassword: String!
  hash: String!
  password: String!
}

enum Roles {
  COACH
  COACHEE
  COACHEE_ADMIN
  COACHEE_OWNER
  STAFF
  SUPER_USER
}

input S3UploadSignedUrlDto {
  key: String!
  type: String!
}

type SatBasic {
  createdAt: DateTime!
  description: String!
  id: Float!
  sections: [SatBasicSection!]
  testsReports: [SatReport!]
  title: String!
  translations: Translation
  updatedAt: DateTime
}

type SatBasicAnswer {
  answerDimension: String
  id: Float!
  order: String!
  question: SatBasicQuestion!
  reportQuestions: SatReportQuestion!
  title: String!
  translations: Translation
  value: Float!
}

input SatBasicAnswerDto {
  answerDimension: AnswerDimensions
  order: Float!
  satBasicQuestionId: Float!
  title: String!
  translations: TranslationDto
  value: Float!
}

input SatBasicDto {
  description: String!
  satBasicSections: [NestedSatBasicSectionDto!]!
  title: String!
}

type SatBasicQuestion {
  answers: [SatBasicAnswer!]!
  dimension: String
  id: Float!
  order: String!
  reportQuestions: SatReportQuestion
  section: SatBasicSection!
  title: String!
  translations: Translation
  type: String!
}

input SatBasicQuestionDto {
  dimension: QuestionDimentions
  order: Float!
  satBasicAnswers: [NestedSatBasicAnswerDto!]!
  satBasicSectionId: Float!
  title: String!
  translations: TranslationDto
  type: QuestionsEnum!
}

type SatBasicSection {
  codename: String!
  id: Float!
  order: String!
  questions: [SatBasicQuestion!]!
  satTest: SatBasic!
  sectionResults: [SatSectionResult!]!
  title: String!
  translations: Translation
}

input SatBasicSectionDto {
  codename: SectionCodenames
  order: Float!
  questions: [NestedSatBasicQuestionDto!]!
  satBasicId: Float!
  title: String!
  translations: TranslationDto
}

type SatReport {
  createdAt: DateTime!
  id: Float!
  result: [SatResultAreaObjectType!]
  satRealized: SatBasic!
  sectionsResults: [SatSectionResult!]!
  suggestedCoaches: SuggestedCoaches!
  updatedAt: DateTime
  user: User!
}

input SatReportDto {
  satRealizedId: Float!
  sectionsResult: [SatSectionResultDto!]!
}

type SatReportQuestion {
  answersSelected: [SatBasicAnswer!]!
  id: Float!
  question: SatBasicQuestion!
  section: SatSectionResult!
}

input SatReportQuestionDto {
  answersSelected: [Float!]!
  question: Float!
}

type SatResultAreaObjectType {
  area: String!
  areaCodeName: String!
  diagnostics: [DiagnosticsEnum!]
  puntuations: [SatResultPuntuationObjectType!]
}

type SatResultPuntuationObjectType {
  base: Float
  codename: String
  name: String!
  value: Float!
}

type SatSectionResult {
  id: Float!
  questions: [SatReportQuestion!]!
  satReport: SatReport!
  section: SatBasicSection!
}

input SatSectionResultDto {
  questions: [SatReportQuestionDto!]!
  section: Float!
}

enum SectionCodenames {
  EMOTIONAL_STATE
  GENERAL
  GETTING_INTO_ACTION
  HAPPINESS
  HEALT
  LEADERSHIP
  LIFE_PURPOSE
  SUBORDINATE
  TEAMWORK
}

input SelectCoachDTO {
  coachId: Float!
  suggestedCoachId: Float!
}

input SignInDto {
  email: String!
  password: String!
}

input SignupCoacheeDto {
  coacheeData: CoacheeSignUpDto!
  organizationData: OrganizationDto!
  signupData: CreateUserDto!
}

type Subscription {
  subscribeToCoachingChat: Message!
}

type SuggestedCoaches {
  coachee: Coachee!
  coaches: [Coach!]!
  createdAt: DateTime!
  id: Float!
  rejected: Boolean
  rejectionReason: String
  satReport: SatReport!
  updatedAt: DateTime
}

type TimeZoneObjectType {
  label: String!
  name: String!
  tzCode: String!
  utc: String!
}

type TotalPerStatus {
  percentage: Float!
  status: CoacheeRegistrationStatus!
  total: Float!
}

type Translation {
  en: Label!
}

input TranslationDto {
  en: LabelDto!
}

input UpdateCoacheeEvaluationDto {
  evaluation: String!
}

input UpdateFavoritePostDto {
  strapiPostId: Float!
}

input UpdateMessageDto {
  message: String!
}

input UpdateObjectiveTaskDto {
  executions: Int!
  repetitions: Float
  title: String
}

input UpdatePostProgressDto {
  progress: Float
  strapiPostId: Float
}

type User {
  chats: [Chat!]!
  coach: Coach
  coachee: Coachee
  createdAt: DateTime!
  email: String!
  favoritesPosts: [FavoritePost!]
  hashResetPassword: String!
  hashedRefreshToken: String!
  id: Float!
  isActive: Boolean!
  isStaff: Boolean!
  isSuperUser: Boolean!
  isVerified: Boolean!
  language: Languages!
  lastLoggedIn: DateTime
  name: String!
  organization: Organization
  password: String!
  postsProgress: [PostProgress!]
  readMessages: [Message!]
  role: Roles!
  sentMessages: [Message!]
  testResults: [SatReport!]
  updatedAt: DateTime!
  verificationCode: String!
}

input VerifyAccountDto {
  code: String!
  email: String!
}
